diff '--color=auto' -Nuar rocprofiler-rocm-6.2.4.orig/bin/mem_manager.py rocprofiler-rocm-6.2.4/bin/mem_manager.py
--- rocprofiler-rocm-6.2.4.orig/bin/mem_manager.py	2024-10-07 22:05:50.000000000 +0200
+++ rocprofiler-rocm-6.2.4/bin/mem_manager.py	2024-12-01 23:08:22.278545727 +0100
@@ -121,7 +121,7 @@
         event = rec_vals[2]  # 'Name'
         procid = rec_vals[3]  # 'pid'
         recordid = rec_vals[5]  # 'Index'
-        size_ptrn = re.compile(DELIM + "Size=(\d+)" + DELIM)
+        size_ptrn = re.compile(DELIM + r"Size=(\d+)" + DELIM)
         # query syncronous memcopy API record
         key = (recordid, procid, 0)
         if key in self.memcopies:
diff '--color=auto' -Nuar rocprofiler-rocm-6.2.4.orig/bin/tblextr.py rocprofiler-rocm-6.2.4/bin/tblextr.py
--- rocprofiler-rocm-6.2.4.orig/bin/tblextr.py	2024-10-07 22:05:50.000000000 +0200
+++ rocprofiler-rocm-6.2.4/bin/tblextr.py	2024-12-01 23:10:58.958634939 +0100
@@ -131,14 +131,14 @@
         return
     inp = open(infile, "r")
 
-    beg_pattern = re.compile('^dispatch\[(\d*)\], (.*) kernel-name\("([^"]*)"\)')
-    prop_pattern = re.compile("([\w-]+)\((\w+)\)")
-    ts_pattern = re.compile(", time\((\d*),(\d*),(\d*),(\d*)\)")
+    beg_pattern = re.compile(r'^dispatch\[(\d*)\], (.*) kernel-name\("([^"]*)"\)')
+    prop_pattern = re.compile(r"([\w-]+)\((\w+)\)")
+    ts_pattern = re.compile(r", time\((\d*),(\d*),(\d*),(\d*)\)")
     # var pattern below matches a variable name and a variable value from a one
     # line text in the format of for example "WRITE_SIZE (0.2500000000)" or
     # "GRBM_GUI_ACTIVE (27867)" or "TA_TA_BUSY[0]"
-    var_pattern = re.compile("^\s*([a-zA-Z0-9_]+(?:\[\d+\])?)\s+\((\d+(?:\.\d+)?)\)")
-    pid_pattern = re.compile("pid\((\d*)\)")
+    var_pattern = re.compile(r"^\s*([a-zA-Z0-9_]+(?:\[\d+\])?)\s+\((\d+(?:\.\d+)?)\)")
+    pid_pattern = re.compile(r"pid\((\d*)\)")
 
     dispatch_number = 0
     var_table_pid = 0
@@ -416,7 +416,7 @@
 #############################################################
 # arguments manipulation routines
 def get_field(args, field):
-    ptrn1_field = re.compile(r"^.* " + field + "\(")
+    ptrn1_field = re.compile(r"^.* " + field + r"\(")
     ptrn2_field = re.compile(r"\) .*$")
     ptrn3_field = re.compile(r"\)\)$")
     (field_name, n) = ptrn1_field.subn("", args, count=1)
@@ -429,7 +429,7 @@
 
 def set_field(args, field, val):
     return re.subn(
-        field + "\(\w+\)([ \)])", field + "(" + str(val) + ")\\1", args, count=1
+        field + r"\(\w+\)([ \)])", field + "(" + str(val) + r")\\1", args, count=1
     )
 
 
@@ -493,8 +493,8 @@
     hip_stream_wait_write_ptrn = re.compile(
         r"hipStreamWaitValue64|hipStreamWriteValue64|hipStreamWaitValue32|hipStreamWriteValue32"
     )
-    prop_pattern = re.compile("([\w-]+)\((\w+)\)")
-    beg_pattern = re.compile('^dispatch\[(\d*)\], (.*) kernel-name\("([^"]*)"\)')
+    prop_pattern = re.compile(r"([\w-]+)\((\w+)\)")
+    beg_pattern = re.compile(r'^dispatch\[(\d*)\], (.*) kernel-name\("([^"]*)"\)')
     hip_strm_cr_event_ptrn = re.compile(r"hipStreamCreate")
     hsa_mcopy_ptrn = re.compile(r"hsa_amd_memory_async_copy")
     ptrn_fixformat = re.compile(r"(\d+:\d+ \d+:\d+ \w+)\(\s*(.*)\)$")
